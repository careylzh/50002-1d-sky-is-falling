module gamefsm (
    input clk,              // 50MHz clock
    input rst,            // reset button (active low)
    // input io_button [5],    // 5 buttons on IO Shield
    
    input left_button_raw,
    input right_button_raw,
    input start_button_raw,
    input gameover,
    input chickenbuld,
    input restart_req,
    //input skyshifted,
    output led_matrix[8][8],
    output debug[8],
    output debug1[8],
    output debug2[8],
    output chickenWin,
    output gen_sky_enable,
    output shift_sky_enable,
    output generate_sky[5],
    output shiftchickenright_en,
    output shiftchickenleft_en,
    output init_chicken_en,
    output start_en,
    output skywin
    //output skyCollisionCheck,_en
    
    
    //output debugled[8]
  ) {
  
  //sig score[4];
  
  // bin_to_dec bin_to_dec;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    //reset_conditioner reset_cond;
    
    edge_detector skyFalling_edge(#RISE(1), #FALL(1));
    //edge_detector skyCollision_edge;
    //edge_detector skyShift_edge(#RISE(1), #FALL(1));
    
    .rst(rst){
      fsm state = {START, INITGRASS, INITCHICKEN, IDLE, GENRAN, MOVERIGHT, MOVELEFT, CHICKENWIN, SKYWIN};
      
      dff debug_reg[8];
      dff debug_reg1[8];
      dff debug_reg2[8];
      dff timeCount[33];
      
      dff skyshifter[25];
      
      counter skyFalling(#SIZE(1),#DIV(25));
      //counter skyShift(#SIZE(1),#DIV(25));
      //counter skyCollision(#SIZE(1),#DIV(28));
      
      //dff skyshiftcounter[25];
      
      pn_gen skygenerator(.next(1));
      
      dff seed[32];
      
      
      dff current_sky[5];
      
      // dff gen_ran_en[5];
      
    }
  }
  
  sig skyFall_check;
  
  
  always {
    start_en=0;
    chickenWin = 0;
    seed.d = seed.q + 1;
    skyshifter.d = skyshifter.q+1;
    
    skygenerator.seed = seed.q;
    //skygenerator.next = 1;
    //gen_sky_enable =0;
    shift_sky_enable =0;
    skyFalling_edge.in = skyFalling.value;
    skyFall_check = skyFalling_edge.out;
    
    
    //skyShift_edge.in = skyShift.value;
    
    
    //skyCollision_edge.in = skyCollision.value;
    //skyCollision_check = skyCollision_edge.out;
    
    debug = debug_reg.q;
    debug1 = debug_reg1.q;
    debug2 = debug_reg2.q;
    
    //  debugled = c{skyshifted, skyFall_check, skyShift_check,gen_ran_en.q};
    
    //gen_sky_enable = skyFall_check;
    //shift_sky_enable = skyShift_check;
    //skyCollisionCheck_en = skyCollision_check;
    generate_sky = current_sky.q;
    gen_sky_enable =0;
    shiftchickenleft_en = 0;
    shiftchickenright_en = 0;
    init_chicken_en = 0;
    skywin =0;
    
    led_matrix = 8x{{8b0}};
    // bin_to_dec.value = scA.score;
    //score= bin_to_dec.digits[0];
    //score = 0;
    //sky = 8x{{8b0}};
    //chicken = 8x{{8h0}};
    // grass = 2x{{32b11111111111111111111111111111111}};
    
    case (state.q){                 //initial start state of finite state machine
      state.START:
        if(start_button_raw){
          state.d = state.IDLE;
        }
      
      state.IDLE:
        timeCount.d = timeCount.q + 1 ;
        gen_sky_enable = 0;
        init_chicken_en = 0;
        shiftchickenleft_en = 0;
        shiftchickenright_en = 0;
        shift_sky_enable = 0;
        
        if(skyFall_check){
          state.d = state.GENRAN;
        }
        
        else if (restart_req){
          if(start_button_raw){
            start_en = 1;
          }
        }
        
        if (skyshifter.q[24]){
          skyshifter.d = 0;
          shift_sky_enable = 1;
        }
        /* led_matrix = sky&chicken; //display the entire led matrix
         
         debug_reg.d = b1111;
         
         
         if(skyFall_check){ //every 1.6s, generate sky once
         state.d = state.GENRAN;
         }
         
         // if (scB.out1 ==1 & scB.out2==1){ //around every 0.4s, sky falls, here use two bit of out, to avoid collision with timerA
         //     state.d = state.SKYFALL;
         //  }
         //if (button){ //when button is pressed, chicken moves left or right*/
      

      
      state.GENRAN:
        //gen_ran_en.d = skygenerator.num[4:0];
        gen_sky_enable =1;
        shift_sky_enable = 1;
        //sky[7] = genSky.sky[0];
        //led_matrix[7] = sky[7];
        
        //skygenerator.next = 1;
        //current_sky.d = skygenerator.num[4:0];
        generate_sky = skygenerator.num[4:0];
        //generate_sky = current_sky.q;//debug
        // debug_reg.d = current_sky.q;
        //debug_reg2.d = current_sky.q;
        // debug_reg1.d = initgame.chicken[0];
        state.d = state.IDLE;
      

        /*  state.SKYFALL:
         //sky fall shift first
         //shift sky[7:1] down to sky[6:0]
         state.d = state.CHECKCOL;
         
         state.CHECKCOL:
         if (sky[0]&chicken[0]){  //CHECK if sky and chicken has collision using alu, if collision happens, game over
         state.d = state.GAMEOVER;
         }
         state.d = state.CHECKSKYDIS;
         
         state.CHECKSKYDIS:
         if(^sky[0] ==1){  //check if sky is falling to the bottom by 8nor gate using alu
         sky[0] = 8b0;
         led_matrix[0] = chicken[0];
         score = score + 2; //replace with alu add function later, or move this to skydisappear state
         }
         state.d = state.IDLE;
         
         state.GAMEOVER:
         //display score at seven segment
         if(io_button[1]){      //if center button is pressed, go back to start state of the game
         state.d = state.START;
         }
      */
      default:
        gen_sky_enable = 0;
    }
  }
}