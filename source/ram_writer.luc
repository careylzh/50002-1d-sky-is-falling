module ram_writer (
    input clk,  // clock
    input rst,  // reset
    output write_data_top[3],
    output write_data_bottom[3],
    output write_en_top,
    output write_en_bottom,
    output write_address_top,
    output write_address_bottom,
    input data_read_top[3],
    input data_read_bottom[3]
  ) {
  
  .clk(clk){
    .rst(rst){
        fsm state = {INIT, INIT2, WRITE};
      
    }
  }

  always {
    write_data_top = 0;
    write_data_bottom = 0;
    write_en_top = 0;
    write_en_bottom = 0;
    write_address_top = 0;
    write_address_bottom = 0;
    
    case (state.q){
      state.INIT:
      
        write_address_top = b0011;
        write_en_top = b1;
        write_data_top = b011; // red
            
        write_address_bottom = b0001;
        write_en_bottom = b1;
        write_data_bottom = b010; // green

        state.d = state.INIT2;
        
      state.INIT2:
        write_address_top = b0111;
        write_en_top = b1;
        write_data_top = b100; // blue
        
        write_address_bottom = b0101;
        write_en_bottom = b1;
        write_data_bottom = b111; // white
        state.d = state.WRITE;
        
      state.WRITE:
         state.d = state.WRITE;
      
    }
  }
}
