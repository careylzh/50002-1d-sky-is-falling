module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    //output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
  
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock

    input avr_tx,           // AVR TX (FPGA RX)

    input avr_rx_busy,       // AVR RX buffer full
    
    output led_r[2],
    output led_g[2],
    output led_b[2],
    output led_addr[4],
    output led_clk,
    output led_lat,
    output led_blk,
    
    //output io_led [3][8],   // LEDs on IO Shield
    //output io_seg [8],      // 7-segment LEDs on IO Shield
    //output io_sel [4],      // Digit select on IO Shield
    //input io_button [5],    // 5 buttons on IO Shield
    //input io_dip [3][8],     // DIP switches on IO Shield
    
    input leftbutton,
    input rightbutton,
    input startbutton
    
    
    
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {

    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner leftbutton_cond;
    button_conditioner rightbutton_cond;
    button_conditioner startbutton_cond;
    
    edge_detector leftbutton_edge(#RISE(1), #FALL(0));
    edge_detector rightbutton_edge(#RISE(1), #FALL(0));    
    edge_detector startbutton_edge(#RISE(1), #FALL(0));
    
    .rst(rst){
      
      //matrices
      matrix_ram matrix_data;
      matrix_writer matrix_writer;   
      gamefsm game_fsm;
      genSky genSky;
      
    }
  }
  

  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
   // led = c{3b0, 5b11111};  // connect buttons to LEDs
    //led = 8h00;             // turn LEDs off
    led_r = 2x{b0};
    led_g = 2x{b0};
    led_b = 2x{b0};
    led_addr = 4x{b0};
    led_clk = b0;
    led_lat = b0;
    led_blk = b0;
    
    //io_seg = 3x{c{8b0}};
    //io_sel = 4x{b1};
    // connect inputs of avr
  
    //io_led = io_dip;   // connect the DIP switches to the LEDs
    
   /*
    led_r=matrix.out_r;
    led_g=matrix.out_g;
    led_b=matrix.out_b;
    led_addr=matrix.out_addr;
    led_clk=matrix.out_clk;
    led_lat=matrix.out_lat;
    led_blk=matrix.out_blk;
      */
    // set inputs to fsm fsmchick
//    game_fsm.io_button = io_button;
  //  io_led[0] = game_fsm.debug;
  //  io_led[1] = game_fsm.debug1;
   // io_led[2] = game_fsm.debug2;
    
      /*  
    matrix_data.generateSkyBooltSky = b0;
    matrix_data.shiftSkyBoolight = b0;
    matrix_data.shiftChickenLeftleft = b0;
    matrix_data.shiftChickenRightheck = b0;
    matrix_data.check_lifet_en0= b1;
    */
    
        
   
    
 //   game_fsm.io_button = b1;
   // game_fsm.buttonleft = redbutton;
  //  game_fsm.buttonright = whitebutton;
  //  game_fsm.buttonstart = bluebutton;
    
   /* matrix_data.shiftSky = game_fsm.shift_sky_enable;
    matrix_data.generateSky = game_fsm.generate_sky;
    matrix_data.shiftchickenleft = game_fsm.shiftchickenleft_en;
    matrix_data.shiftchickenright = game_fsm.shiftchickenright_en;
    matrix_data.init_en = b1;
    matrix_data.sky_col_check = game_fsm.skyCollisionCheck_en;*/
    
    leftbutton_cond.in = leftbutton;
    leftbutton_edge.in = leftbutton_cond.out;
    rightbutton_cond.in = rightbutton;
    rightbutton_edge.in = rightbutton_cond.out;
    startbutton_cond.in = startbutton;
    startbutton_edge.in = startbutton_cond.out;
    
   
    
    
    game_fsm.right_button_raw = rightbutton;
    game_fsm.left_button_raw = leftbutton;
    game_fsm.start_button_raw = startbutton;
    
    game_fsm.gameover = matrix_data.gameover;
    //game_fsm.skyshifted = matrix_data.skyshifted;
    //matrix_data.genSky = bluebutton_cond.out;
    matrix_data.genSky = game_fsm.gen_sky_enable;
    matrix_data.generateSky = genSky.sky;//game_fsm.generate_sky;
   // matrix_data.generateSky = game_fsm.generate_sky;
    
    matrix_data.startbutton = startbutton_edge.out;
    matrix_data.start_fromfsm =  game_fsm.start_en;
    matrix_data.shiftSky = game_fsm.shift_sky_enable; //startbutton_edge.out;//
    
    
    
    matrix_data.shiftchickenleft = leftbutton_edge.out; //game_fsm.shiftchickenleft_en;
    matrix_data.shiftchickenright = rightbutton_edge.out;// game_fsm.shiftchickenright_en;
    matrix_data.init_chicken_en = game_fsm.init_chicken_en;
    
    matrix_data.change_chicken = startbutton;
    
    game_fsm.restart_req = matrix_data.restart_tofsm;
    game_fsm.chickenbuld = matrix_data.chickenbuild;
    
    matrix_data.chicken_location = 0;  
       
   //  led = b11111111;

   // led[2:0] = matrix_writer.row_index;
   // led[7:4] = matrix_writer.col_index;   
    //led[2:0] = matrix_writer.debug;
    //led[7:4] = b00000;
    //led = game_fsm.debugled;
      
    matrix_data.row_address = matrix_writer.row_index;
    matrix_data.column_address = matrix_writer.col_index;
    matrix_writer.data = matrix_data.out;


    led_r = c{matrix_writer.red0, matrix_writer.red1};
    led_g = c{ matrix_writer.green0, matrix_writer.green1};
    led_b = c{ matrix_writer.blue0, matrix_writer.blue1};
    led_addr = matrix_writer.address;
    led_clk = matrix_writer.sclk_out;
    led_lat = matrix_writer.latch;
    led_blk = matrix_writer.blank;
    
    
    //led = matrix_data.debug;
    
  }
}