/*
   This file was generated automatically by Alchitry Labs version 1.1.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     ADDRESS_SIZE = 4
     MATRIX_WIDTH = 64
*/
module matrix_ram_10 (
    input clk,
    input rst,
    input [3:0] row_address,
    input [5:0] column_address,
    output reg [5:0] out
  );
  
  localparam ADDRESS_SIZE = 3'h4;
  localparam MATRIX_WIDTH = 7'h40;
  
  
  localparam DATA = 6144'h2492492492492492492492492492492492492492492492492492492492492492492492492492492492492492492492490000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6dbb6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe79e79e79e79e79e79e79e79e79e79e79e79e79e79e79e79e79e79e79e79e79e79e79e79e79e79e79e79e79e79e79e792cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cb2cba69a69a69a69a69a69a69a69a69a69a69a69a69a69a69a69a69a69a69a69a69a69a69a69a69a69a69a69a69a69a69a69451451451451451451451451451451451451451451451451451451451451451451451451451451451451451451451451041041041041041041041041041041041041041041041041041041041041041041041041041041041041041041041041befbefbefbefbefbefbefbefbefbefbefbefbefbefbefbefbefbefbefbefbefbefbefbefbefbefbefbefbefbefbefbef3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf3cf249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249249;
  
  reg [3071:0] M_reg_data_tophalf_d, M_reg_data_tophalf_q = 1'h0;
  reg [3071:0] M_reg_data_bottomhalf_d, M_reg_data_bottomhalf_q = 1'h0;
  localparam START_state = 1'd0;
  localparam LOOP_state = 1'd1;
  
  reg M_state_d, M_state_q = START_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_reg_data_tophalf_d = M_reg_data_tophalf_q;
    M_reg_data_bottomhalf_d = M_reg_data_bottomhalf_q;
    
    
    case (M_state_q)
      START_state: begin
        M_reg_data_tophalf_d[0+0+2-:3] = 3'h6;
        M_reg_data_tophalf_d[0+3+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[0+0+2-:3] = 3'h1;
        M_reg_data_bottomhalf_d[0+3+2-:3] = 3'h4;
        M_reg_data_tophalf_d[960+63+2-:3] = 3'h1;
        M_state_d = LOOP_state;
      end
      LOOP_state: begin
        M_state_d = M_state_q;
      end
    endcase
    out = {M_reg_data_bottomhalf_q[(row_address)*192+(column_address)*3+2-:3], M_reg_data_tophalf_q[(row_address)*192+(column_address)*3+2-:3]};
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_data_tophalf_q <= 1'h0;
      M_reg_data_bottomhalf_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_reg_data_tophalf_q <= M_reg_data_tophalf_d;
      M_reg_data_bottomhalf_q <= M_reg_data_bottomhalf_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
