/*
   This file was generated automatically by Alchitry Labs version 1.1.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     ADDRESS_SIZE = 4
     MATRIX_WIDTH = 64
*/
module matrix_ram_5 (
    input clk,
    input rst,
    input [4:0] generateSky,
    input shiftSky,
    input [3:0] row_address,
    input [5:0] column_address,
    output reg [5:0] out
  );
  
  localparam ADDRESS_SIZE = 3'h4;
  localparam MATRIX_WIDTH = 7'h40;
  
  
  reg [3071:0] M_reg_data_tophalf_d, M_reg_data_tophalf_q = 1'h0;
  reg [3071:0] M_reg_data_bottomhalf_d, M_reg_data_bottomhalf_q = 1'h0;
  reg [3071:0] M_chicken_data_tophalf_d, M_chicken_data_tophalf_q = 1'h0;
  reg [3071:0] M_chicken_data_bottomhalf_d, M_chicken_data_bottomhalf_q = 1'h0;
  localparam START_state = 2'd0;
  localparam LOOP_state = 2'd1;
  localparam GENERATE_state = 2'd2;
  localparam SHIFT_state = 2'd3;
  
  reg [1:0] M_state_d, M_state_q = START_state;
  
  reg [2:0] top_half_proc;
  
  reg [2:0] bottom_half_proc;
  
  always @* begin
    M_state_d = M_state_q;
    M_reg_data_tophalf_d = M_reg_data_tophalf_q;
    M_reg_data_bottomhalf_d = M_reg_data_bottomhalf_q;
    
    
    case (M_state_q)
      START_state: begin
        M_reg_data_tophalf_d[0+0+2-:3] = 3'h2;
        M_reg_data_tophalf_d[192+0+2-:3] = 3'h2;
        M_reg_data_tophalf_d[384+0+2-:3] = 3'h2;
        M_reg_data_tophalf_d[576+0+2-:3] = 3'h2;
        M_reg_data_tophalf_d[768+0+2-:3] = 3'h2;
        M_reg_data_tophalf_d[960+0+2-:3] = 3'h2;
        M_reg_data_tophalf_d[1152+0+2-:3] = 3'h2;
        M_reg_data_tophalf_d[1344+0+2-:3] = 3'h2;
        M_reg_data_tophalf_d[1536+0+2-:3] = 3'h2;
        M_reg_data_tophalf_d[1728+0+2-:3] = 3'h2;
        M_reg_data_tophalf_d[1920+0+2-:3] = 3'h2;
        M_reg_data_tophalf_d[2112+0+2-:3] = 3'h2;
        M_reg_data_tophalf_d[2304+0+2-:3] = 3'h2;
        M_reg_data_tophalf_d[2496+0+2-:3] = 3'h2;
        M_reg_data_tophalf_d[2688+0+2-:3] = 3'h2;
        M_reg_data_tophalf_d[2880+0+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[192+0+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[384+0+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[576+0+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[768+0+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[960+0+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[1152+0+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[1344+0+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[1536+0+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[1728+0+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[1920+0+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[2112+0+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[2304+0+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[2496+0+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[2688+0+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[2880+0+2-:3] = 3'h2;
        M_reg_data_tophalf_d[0+3+2-:3] = 3'h2;
        M_reg_data_tophalf_d[192+3+2-:3] = 3'h2;
        M_reg_data_tophalf_d[384+3+2-:3] = 3'h2;
        M_reg_data_tophalf_d[576+3+2-:3] = 3'h2;
        M_reg_data_tophalf_d[768+3+2-:3] = 3'h2;
        M_reg_data_tophalf_d[960+3+2-:3] = 3'h2;
        M_reg_data_tophalf_d[1152+3+2-:3] = 3'h2;
        M_reg_data_tophalf_d[1344+3+2-:3] = 3'h2;
        M_reg_data_tophalf_d[1536+3+2-:3] = 3'h2;
        M_reg_data_tophalf_d[1728+3+2-:3] = 3'h2;
        M_reg_data_tophalf_d[1920+3+2-:3] = 3'h2;
        M_reg_data_tophalf_d[2112+3+2-:3] = 3'h2;
        M_reg_data_tophalf_d[2304+3+2-:3] = 3'h2;
        M_reg_data_tophalf_d[2496+3+2-:3] = 3'h2;
        M_reg_data_tophalf_d[2688+3+2-:3] = 3'h2;
        M_reg_data_tophalf_d[2880+3+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[0+3+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[192+3+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[384+3+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[576+3+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[768+3+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[960+3+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[1152+3+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[1344+3+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[1536+3+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[1728+3+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[1920+3+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[2112+3+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[2304+3+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[2496+3+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[2688+3+2-:3] = 3'h2;
        M_reg_data_bottomhalf_d[2880+3+2-:3] = 3'h2;
        M_reg_data_tophalf_d[2880+6+2-:3] = 3'h7;
        M_reg_data_tophalf_d[2880+9+2-:3] = 3'h7;
        M_reg_data_tophalf_d[2880+12+2-:3] = 3'h4;
        M_reg_data_tophalf_d[2880+15+2-:3] = 3'h7;
        M_reg_data_tophalf_d[2688+9+2-:3] = 3'h7;
        M_reg_data_tophalf_d[2688+12+2-:3] = 3'h7;
        M_reg_data_bottomhalf_d[0+6+2-:3] = 3'h7;
        M_reg_data_bottomhalf_d[0+9+2-:3] = 3'h7;
        M_reg_data_bottomhalf_d[0+12+2-:3] = 3'h7;
        M_reg_data_bottomhalf_d[0+15+2-:3] = 3'h7;
        M_reg_data_bottomhalf_d[192+6+2-:3] = 3'h7;
        M_reg_data_bottomhalf_d[192+9+2-:3] = 3'h7;
        M_reg_data_bottomhalf_d[192+12+2-:3] = 3'h4;
        M_reg_data_bottomhalf_d[192+15+2-:3] = 3'h7;
        M_reg_data_bottomhalf_d[384+9+2-:3] = 3'h7;
        M_reg_data_bottomhalf_d[384+12+2-:3] = 3'h7;
        M_reg_data_bottomhalf_d[0+18+2-:3] = 3'h1;
        M_reg_data_tophalf_d[1920+162+2-:3] = 3'h4;
        M_reg_data_tophalf_d[2112+162+2-:3] = 3'h4;
        M_reg_data_tophalf_d[2304+162+2-:3] = 3'h4;
        M_reg_data_tophalf_d[2496+162+2-:3] = 3'h4;
        M_reg_data_tophalf_d[1920+165+2-:3] = 3'h4;
        M_reg_data_tophalf_d[2112+165+2-:3] = 3'h4;
        M_reg_data_tophalf_d[2304+165+2-:3] = 3'h4;
        M_reg_data_tophalf_d[2496+165+2-:3] = 3'h4;
        M_reg_data_tophalf_d[1920+168+2-:3] = 3'h4;
        M_reg_data_tophalf_d[2112+168+2-:3] = 3'h4;
        M_reg_data_tophalf_d[2304+168+2-:3] = 3'h4;
        M_reg_data_tophalf_d[2496+168+2-:3] = 3'h4;
        M_reg_data_tophalf_d[1920+171+2-:3] = 3'h4;
        M_reg_data_tophalf_d[2112+171+2-:3] = 3'h4;
        M_reg_data_tophalf_d[2304+171+2-:3] = 3'h4;
        M_reg_data_tophalf_d[2496+171+2-:3] = 3'h4;
        M_reg_data_bottomhalf_d[384+117+2-:3] = 3'h4;
        M_reg_data_bottomhalf_d[576+117+2-:3] = 3'h4;
        M_reg_data_bottomhalf_d[768+117+2-:3] = 3'h4;
        M_reg_data_bottomhalf_d[960+117+2-:3] = 3'h4;
        M_reg_data_bottomhalf_d[384+120+2-:3] = 3'h4;
        M_reg_data_bottomhalf_d[576+120+2-:3] = 3'h4;
        M_reg_data_bottomhalf_d[768+120+2-:3] = 3'h4;
        M_reg_data_bottomhalf_d[960+120+2-:3] = 3'h4;
        M_reg_data_bottomhalf_d[384+123+2-:3] = 3'h4;
        M_reg_data_bottomhalf_d[576+123+2-:3] = 3'h4;
        M_reg_data_bottomhalf_d[768+123+2-:3] = 3'h4;
        M_reg_data_bottomhalf_d[960+123+2-:3] = 3'h4;
        M_reg_data_bottomhalf_d[384+126+2-:3] = 3'h4;
        M_reg_data_bottomhalf_d[576+126+2-:3] = 3'h4;
        M_reg_data_bottomhalf_d[768+126+2-:3] = 3'h4;
        M_reg_data_bottomhalf_d[960+126+2-:3] = 3'h4;
        M_state_d = LOOP_state;
      end
      LOOP_state: begin
        if (shiftSky) begin
          M_state_d = GENERATE_state;
        end
      end
      GENERATE_state: begin
        if (generateSky < 4'he) begin
          M_reg_data_tophalf_d[(generateSky)*192+189+2-:3] = 3'h4;
          M_reg_data_tophalf_d[(generateSky)*192+186+2-:3] = 3'h4;
          M_reg_data_tophalf_d[(generateSky)*192+183+2-:3] = 3'h4;
          M_reg_data_tophalf_d[(generateSky + 1'h1)*192+189+2-:3] = 3'h4;
          M_reg_data_tophalf_d[(generateSky + 1'h1)*192+186+2-:3] = 3'h4;
          M_reg_data_tophalf_d[(generateSky + 1'h1)*192+183+2-:3] = 3'h4;
          M_reg_data_tophalf_d[(generateSky + 2'h2)*192+189+2-:3] = 3'h4;
          M_reg_data_tophalf_d[(generateSky + 2'h2)*192+186+2-:3] = 3'h4;
          M_reg_data_tophalf_d[(generateSky + 2'h2)*192+183+2-:3] = 3'h4;
        end else begin
          if (4'hf < generateSky < 5'h1d) begin
            M_reg_data_bottomhalf_d[(generateSky)*192+189+2-:3] = 3'h4;
            M_reg_data_bottomhalf_d[(generateSky)*192+186+2-:3] = 3'h4;
            M_reg_data_bottomhalf_d[(generateSky)*192+183+2-:3] = 3'h4;
            M_reg_data_bottomhalf_d[(generateSky + 1'h1)*192+189+2-:3] = 3'h4;
            M_reg_data_bottomhalf_d[(generateSky + 1'h1)*192+186+2-:3] = 3'h4;
            M_reg_data_bottomhalf_d[(generateSky + 1'h1)*192+183+2-:3] = 3'h4;
            M_reg_data_bottomhalf_d[(generateSky + 2'h2)*192+189+2-:3] = 3'h4;
            M_reg_data_bottomhalf_d[(generateSky + 2'h2)*192+186+2-:3] = 3'h4;
            M_reg_data_bottomhalf_d[(generateSky + 2'h2)*192+183+2-:3] = 3'h4;
          end
        end
        M_state_d = LOOP_state;
      end
    endcase
    if (M_chicken_data_bottomhalf_q[(row_address)*192+(column_address)*3+2-:3]) begin
      bottom_half_proc = M_chicken_data_bottomhalf_q[(row_address)*192+(column_address)*3+2-:3];
    end else begin
      bottom_half_proc = M_reg_data_bottomhalf_q[(row_address)*192+(column_address)*3+2-:3];
    end
    if (M_chicken_data_tophalf_q[(row_address)*192+(column_address)*3+2-:3]) begin
      top_half_proc = M_chicken_data_tophalf_q[(row_address)*192+(column_address)*3+2-:3];
    end else begin
      top_half_proc = M_reg_data_tophalf_q[(row_address)*192+(column_address)*3+2-:3];
    end
    out = {top_half_proc, bottom_half_proc};
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_data_tophalf_q <= 1'h0;
      M_reg_data_bottomhalf_q <= 1'h0;
      M_chicken_data_tophalf_q <= 1'h0;
      M_chicken_data_bottomhalf_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_reg_data_tophalf_q <= M_reg_data_tophalf_d;
      M_reg_data_bottomhalf_q <= M_reg_data_bottomhalf_d;
      M_chicken_data_tophalf_q <= M_chicken_data_tophalf_d;
      M_chicken_data_bottomhalf_q <= M_chicken_data_bottomhalf_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
