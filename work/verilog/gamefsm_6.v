/*
   This file was generated automatically by Alchitry Labs version 1.1.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module gamefsm_6 (
    input clk,
    input rst,
    input [4:0] io_button,
    output reg [63:0] led_matrix,
    output reg [7:0] debug,
    output reg [7:0] debug1,
    output reg [7:0] debug2,
    output reg shiftGen,
    output reg [4:0] generate_sky
  );
  
  
  
  reg [63:0] sky;
  
  reg [63:0] chicken;
  
  reg score;
  
  wire [1-1:0] M_skyFalling_edge_out;
  reg [1-1:0] M_skyFalling_edge_in;
  edge_detector_11 skyFalling_edge (
    .clk(clk),
    .in(M_skyFalling_edge_in),
    .out(M_skyFalling_edge_out)
  );
  wire [1-1:0] M_skyCollision_edge_out;
  reg [1-1:0] M_skyCollision_edge_in;
  edge_detector_11 skyCollision_edge (
    .clk(clk),
    .in(M_skyCollision_edge_in),
    .out(M_skyCollision_edge_out)
  );
  localparam START_state = 4'd0;
  localparam INIT_state = 4'd1;
  localparam IDLE_state = 4'd2;
  localparam GENRAN_state = 4'd3;
  localparam MOVERIGHT_state = 4'd4;
  localparam MOVELEFT_state = 4'd5;
  localparam SKYFALL_state = 4'd6;
  localparam CHECKSKYDIS_state = 4'd7;
  localparam CHECKCOL_state = 4'd8;
  localparam GAMEOVER_state = 4'd9;
  
  reg [3:0] M_state_d, M_state_q = START_state;
  wire [8-1:0] M_initgame_chicken;
  wire [8-1:0] M_initgame_sky;
  initgame_12 initgame (
    .clk(clk),
    .rst(rst),
    .chicken(M_initgame_chicken),
    .sky(M_initgame_sky)
  );
  wire [8-1:0] M_genSky_sky;
  genSky_13 genSky (
    .clk(clk),
    .rst(rst),
    .sky(M_genSky_sky)
  );
  wire [1-1:0] M_scA_out;
  stateCounterA_14 scA (
    .clk(clk),
    .rst(rst),
    .out(M_scA_out)
  );
  wire [1-1:0] M_scB_out1;
  wire [1-1:0] M_scB_out2;
  stateCounterB_15 scB (
    .clk(clk),
    .rst(rst),
    .out1(M_scB_out1),
    .out2(M_scB_out2)
  );
  reg [7:0] M_debug_reg_d, M_debug_reg_q = 1'h0;
  reg [7:0] M_debug_reg1_d, M_debug_reg1_q = 1'h0;
  reg [7:0] M_debug_reg2_d, M_debug_reg2_q = 1'h0;
  wire [1-1:0] M_skyFalling_value;
  counter_16 skyFalling (
    .clk(clk),
    .rst(rst),
    .value(M_skyFalling_value)
  );
  wire [1-1:0] M_skyCollision_value;
  counter_17 skyCollision (
    .clk(clk),
    .rst(rst),
    .value(M_skyCollision_value)
  );
  wire [32-1:0] M_skygenerator_num;
  reg [1-1:0] M_skygenerator_next;
  reg [32-1:0] M_skygenerator_seed;
  pn_gen_18 skygenerator (
    .clk(clk),
    .rst(rst),
    .next(M_skygenerator_next),
    .seed(M_skygenerator_seed),
    .num(M_skygenerator_num)
  );
  reg [63:0] M_seed_d, M_seed_q = 1'h0;
  reg [4:0] M_current_sky_d, M_current_sky_q = 1'h0;
  
  reg skyFall_check;
  
  reg skyCollision_check;
  
  always @* begin
    M_state_d = M_state_q;
    M_current_sky_d = M_current_sky_q;
    M_seed_d = M_seed_q;
    M_debug_reg2_d = M_debug_reg2_q;
    M_debug_reg1_d = M_debug_reg1_q;
    M_debug_reg_d = M_debug_reg_q;
    
    M_seed_d = M_seed_q + 1'h1;
    M_skygenerator_seed = M_seed_q;
    M_skygenerator_next = 1'h0;
    M_skyFalling_edge_in = M_skyFalling_value;
    skyFall_check = M_skyFalling_edge_out;
    M_skyCollision_edge_in = M_skyCollision_value;
    skyCollision_check = M_skyCollision_edge_out;
    debug = M_debug_reg_q;
    debug1 = M_debug_reg1_q;
    debug2 = M_debug_reg2_q;
    shiftGen = skyFall_check;
    generate_sky = M_current_sky_q;
    led_matrix = 64'h0000000000000000;
    score = 1'h0;
    sky = 64'h0000000000000000;
    chicken = 64'h0000000000000000;
    
    case (M_state_q)
      START_state: begin
        M_state_d = INIT_state;
      end
      INIT_state: begin
        sky[56+7-:8] = M_initgame_sky[0+7-:8];
        chicken[0+7-:8] = M_initgame_chicken[0+7-:8];
        M_debug_reg_d = M_initgame_sky[0+7-:8];
        M_debug_reg1_d = M_initgame_chicken[0+7-:8];
        led_matrix[0+7-:8] = chicken[0+7-:8];
        led_matrix[56+7-:8] = sky[56+7-:8];
        M_state_d = IDLE_state;
      end
      IDLE_state: begin
        led_matrix = sky & chicken;
        M_debug_reg_d = 4'hf;
        if (skyFall_check) begin
          M_state_d = GENRAN_state;
        end
      end
      GENRAN_state: begin
        sky[56+7-:8] = M_genSky_sky[0+7-:8];
        led_matrix[56+7-:8] = sky[56+7-:8];
        M_skygenerator_next = 1'h1;
        M_current_sky_d = M_skygenerator_num[0+4-:5];
        M_debug_reg2_d = M_current_sky_q;
        M_state_d = IDLE_state;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_debug_reg_q <= 1'h0;
      M_debug_reg1_q <= 1'h0;
      M_debug_reg2_q <= 1'h0;
      M_seed_q <= 1'h0;
      M_current_sky_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_debug_reg_q <= M_debug_reg_d;
      M_debug_reg1_q <= M_debug_reg1_d;
      M_debug_reg2_q <= M_debug_reg2_d;
      M_seed_q <= M_seed_d;
      M_current_sky_q <= M_current_sky_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
