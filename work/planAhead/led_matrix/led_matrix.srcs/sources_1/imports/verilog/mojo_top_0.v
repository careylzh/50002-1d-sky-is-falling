/*
   This file was generated automatically by Alchitry Labs version 1.1.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [1:0] led_r,
    output reg [1:0] led_g,
    output reg [1:0] led_b,
    output reg [3:0] led_addr,
    output reg led_clk,
    output reg led_lat,
    output reg led_blk
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_avr_spi_miso;
  wire [4-1:0] M_avr_spi_channel;
  wire [1-1:0] M_avr_tx;
  wire [1-1:0] M_avr_new_sample;
  wire [10-1:0] M_avr_sample;
  wire [4-1:0] M_avr_sample_channel;
  wire [1-1:0] M_avr_tx_busy;
  wire [8-1:0] M_avr_rx_data;
  wire [1-1:0] M_avr_new_rx_data;
  reg [1-1:0] M_avr_cclk;
  reg [1-1:0] M_avr_spi_mosi;
  reg [1-1:0] M_avr_spi_sck;
  reg [1-1:0] M_avr_spi_ss;
  reg [1-1:0] M_avr_rx;
  reg [4-1:0] M_avr_channel;
  reg [8-1:0] M_avr_tx_data;
  reg [1-1:0] M_avr_new_tx_data;
  reg [1-1:0] M_avr_tx_block;
  avr_interface_2 avr (
    .clk(clk),
    .rst(rst),
    .cclk(M_avr_cclk),
    .spi_mosi(M_avr_spi_mosi),
    .spi_sck(M_avr_spi_sck),
    .spi_ss(M_avr_spi_ss),
    .rx(M_avr_rx),
    .channel(M_avr_channel),
    .tx_data(M_avr_tx_data),
    .new_tx_data(M_avr_new_tx_data),
    .tx_block(M_avr_tx_block),
    .spi_miso(M_avr_spi_miso),
    .spi_channel(M_avr_spi_channel),
    .tx(M_avr_tx),
    .new_sample(M_avr_new_sample),
    .sample(M_avr_sample),
    .sample_channel(M_avr_sample_channel),
    .tx_busy(M_avr_tx_busy),
    .rx_data(M_avr_rx_data),
    .new_rx_data(M_avr_new_rx_data)
  );
  wire [8-1:0] M_register_tx_data;
  wire [1-1:0] M_register_new_tx_data;
  wire [66-1:0] M_register_regOut;
  reg [8-1:0] M_register_rx_data;
  reg [1-1:0] M_register_new_rx_data;
  reg [1-1:0] M_register_tx_busy;
  reg [33-1:0] M_register_regIn;
  reg_interface_3 register (
    .clk(clk),
    .rst(rst),
    .rx_data(M_register_rx_data),
    .new_rx_data(M_register_new_rx_data),
    .tx_busy(M_register_tx_busy),
    .regIn(M_register_regIn),
    .tx_data(M_register_tx_data),
    .new_tx_data(M_register_new_tx_data),
    .regOut(M_register_regOut)
  );
  wire [6-1:0] M_matrix_writer_col_index;
  wire [4-1:0] M_matrix_writer_row_index;
  wire [1-1:0] M_matrix_writer_red0;
  wire [1-1:0] M_matrix_writer_green0;
  wire [1-1:0] M_matrix_writer_blue0;
  wire [1-1:0] M_matrix_writer_red1;
  wire [1-1:0] M_matrix_writer_green1;
  wire [1-1:0] M_matrix_writer_blue1;
  wire [1-1:0] M_matrix_writer_latch;
  wire [1-1:0] M_matrix_writer_blank;
  wire [1-1:0] M_matrix_writer_sclk_out;
  wire [16-1:0] M_matrix_writer_debug;
  wire [4-1:0] M_matrix_writer_address;
  reg [6-1:0] M_matrix_writer_data;
  matrix_writer_4 matrix_writer (
    .clk(clk),
    .rst(rst),
    .data(M_matrix_writer_data),
    .col_index(M_matrix_writer_col_index),
    .row_index(M_matrix_writer_row_index),
    .red0(M_matrix_writer_red0),
    .green0(M_matrix_writer_green0),
    .blue0(M_matrix_writer_blue0),
    .red1(M_matrix_writer_red1),
    .green1(M_matrix_writer_green1),
    .blue1(M_matrix_writer_blue1),
    .latch(M_matrix_writer_latch),
    .blank(M_matrix_writer_blank),
    .sclk_out(M_matrix_writer_sclk_out),
    .debug(M_matrix_writer_debug),
    .address(M_matrix_writer_address)
  );
  wire [6-1:0] M_matrix_data_out;
  reg [5-1:0] M_matrix_data_generateSky;
  reg [1-1:0] M_matrix_data_shiftSky;
  reg [4-1:0] M_matrix_data_row_address;
  reg [6-1:0] M_matrix_data_column_address;
  matrix_ram_5 matrix_data (
    .clk(clk),
    .rst(rst),
    .generateSky(M_matrix_data_generateSky),
    .shiftSky(M_matrix_data_shiftSky),
    .row_address(M_matrix_data_row_address),
    .column_address(M_matrix_data_column_address),
    .out(M_matrix_data_out)
  );
  wire [64-1:0] M_game_fsm_led_matrix;
  wire [8-1:0] M_game_fsm_debug;
  wire [8-1:0] M_game_fsm_debug1;
  wire [8-1:0] M_game_fsm_debug2;
  wire [1-1:0] M_game_fsm_shiftGen;
  wire [5-1:0] M_game_fsm_generate_sky;
  reg [5-1:0] M_game_fsm_io_button;
  gamefsm_6 game_fsm (
    .clk(clk),
    .rst(rst),
    .io_button(M_game_fsm_io_button),
    .led_matrix(M_game_fsm_led_matrix),
    .debug(M_game_fsm_debug),
    .debug1(M_game_fsm_debug1),
    .debug2(M_game_fsm_debug2),
    .shiftGen(M_game_fsm_shiftGen),
    .generate_sky(M_game_fsm_generate_sky)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h1f;
    M_avr_cclk = cclk;
    M_avr_spi_ss = spi_ss;
    M_avr_spi_mosi = spi_mosi;
    M_avr_spi_sck = spi_sck;
    M_avr_rx = avr_tx;
    M_avr_channel = 4'hf;
    M_avr_tx_block = avr_rx_busy;
    spi_miso = M_avr_spi_miso;
    spi_channel = M_avr_spi_channel;
    avr_rx = M_avr_tx;
    M_register_rx_data = M_avr_rx_data;
    M_register_new_rx_data = M_avr_new_rx_data;
    M_avr_tx_data = M_register_tx_data;
    M_avr_new_tx_data = M_register_new_tx_data;
    M_register_tx_busy = M_avr_tx_busy;
    M_register_regIn[32+0-:1] = 1'h0;
    M_register_regIn[0+31-:32] = 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    M_game_fsm_io_button = 1'h1;
    M_matrix_data_shiftSky = M_game_fsm_shiftGen;
    M_matrix_data_generateSky = M_game_fsm_generate_sky;
    M_matrix_data_row_address = M_matrix_writer_row_index;
    M_matrix_data_column_address = M_matrix_writer_col_index;
    M_matrix_writer_data = M_matrix_data_out;
    led_r = {M_matrix_writer_red0, M_matrix_writer_red1};
    led_g = {M_matrix_writer_green0, M_matrix_writer_green1};
    led_b = {M_matrix_writer_blue0, M_matrix_writer_blue1};
    led_addr = M_matrix_writer_address;
    led_clk = M_matrix_writer_sclk_out;
    led_lat = M_matrix_writer_latch;
    led_blk = M_matrix_writer_blank;
  end
endmodule
