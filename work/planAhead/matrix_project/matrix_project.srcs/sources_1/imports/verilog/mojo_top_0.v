/*
   This file was generated automatically by Alchitry Labs version 1.1.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input cclk,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    input avr_tx,
    input avr_rx_busy,
    output reg [1:0] led_r,
    output reg [1:0] led_g,
    output reg [1:0] led_b,
    output reg [3:0] led_addr,
    output reg led_clk,
    output reg led_lat,
    output reg led_blk,
    input leftbutton,
    input rightbutton,
    input startbutton
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_leftbutton_cond_out;
  reg [1-1:0] M_leftbutton_cond_in;
  button_conditioner_2 leftbutton_cond (
    .clk(clk),
    .in(M_leftbutton_cond_in),
    .out(M_leftbutton_cond_out)
  );
  wire [1-1:0] M_rightbutton_cond_out;
  reg [1-1:0] M_rightbutton_cond_in;
  button_conditioner_2 rightbutton_cond (
    .clk(clk),
    .in(M_rightbutton_cond_in),
    .out(M_rightbutton_cond_out)
  );
  wire [1-1:0] M_startbutton_cond_out;
  reg [1-1:0] M_startbutton_cond_in;
  button_conditioner_2 startbutton_cond (
    .clk(clk),
    .in(M_startbutton_cond_in),
    .out(M_startbutton_cond_out)
  );
  wire [1-1:0] M_leftbutton_edge_out;
  reg [1-1:0] M_leftbutton_edge_in;
  edge_detector_3 leftbutton_edge (
    .clk(clk),
    .in(M_leftbutton_edge_in),
    .out(M_leftbutton_edge_out)
  );
  wire [1-1:0] M_rightbutton_edge_out;
  reg [1-1:0] M_rightbutton_edge_in;
  edge_detector_3 rightbutton_edge (
    .clk(clk),
    .in(M_rightbutton_edge_in),
    .out(M_rightbutton_edge_out)
  );
  wire [1-1:0] M_startbutton_edge_out;
  reg [1-1:0] M_startbutton_edge_in;
  edge_detector_3 startbutton_edge (
    .clk(clk),
    .in(M_startbutton_edge_in),
    .out(M_startbutton_edge_out)
  );
  wire [3-1:0] M_matrix_data_top_row_data;
  wire [3-1:0] M_matrix_data_bottom_row_data;
  wire [1-1:0] M_matrix_data_gameover;
  wire [1-1:0] M_matrix_data_chickenbuild;
  wire [6-1:0] M_matrix_data_out;
  wire [2-1:0] M_matrix_data_debug;
  reg [5-1:0] M_matrix_data_generateSky;
  reg [1-1:0] M_matrix_data_genSky;
  reg [1-1:0] M_matrix_data_shiftSky;
  reg [1-1:0] M_matrix_data_shiftchickenright;
  reg [1-1:0] M_matrix_data_shiftchickenleft;
  reg [1-1:0] M_matrix_data_init_chicken_en;
  reg [1-1:0] M_matrix_data_sky_col_check;
  reg [5-1:0] M_matrix_data_chicken_location;
  reg [1-1:0] M_matrix_data_chickenwin;
  reg [1-1:0] M_matrix_data_skywin;
  reg [1-1:0] M_matrix_data_top_row_en;
  reg [4-1:0] M_matrix_data_top_row_address;
  reg [3-1:0] M_matrix_data_top_row_data_in;
  reg [1-1:0] M_matrix_data_bottom_row_en;
  reg [4-1:0] M_matrix_data_bottom_row_address;
  reg [3-1:0] M_matrix_data_bottom_row_data_in;
  reg [1-1:0] M_matrix_data_start_en;
  reg [1-1:0] M_matrix_data_startbutton;
  reg [4-1:0] M_matrix_data_row_address;
  reg [6-1:0] M_matrix_data_column_address;
  matrix_ram_4 matrix_data (
    .clk(clk),
    .rst(rst),
    .generateSky(M_matrix_data_generateSky),
    .genSky(M_matrix_data_genSky),
    .shiftSky(M_matrix_data_shiftSky),
    .shiftchickenright(M_matrix_data_shiftchickenright),
    .shiftchickenleft(M_matrix_data_shiftchickenleft),
    .init_chicken_en(M_matrix_data_init_chicken_en),
    .sky_col_check(M_matrix_data_sky_col_check),
    .chicken_location(M_matrix_data_chicken_location),
    .chickenwin(M_matrix_data_chickenwin),
    .skywin(M_matrix_data_skywin),
    .top_row_en(M_matrix_data_top_row_en),
    .top_row_address(M_matrix_data_top_row_address),
    .top_row_data_in(M_matrix_data_top_row_data_in),
    .bottom_row_en(M_matrix_data_bottom_row_en),
    .bottom_row_address(M_matrix_data_bottom_row_address),
    .bottom_row_data_in(M_matrix_data_bottom_row_data_in),
    .start_en(M_matrix_data_start_en),
    .startbutton(M_matrix_data_startbutton),
    .row_address(M_matrix_data_row_address),
    .column_address(M_matrix_data_column_address),
    .top_row_data(M_matrix_data_top_row_data),
    .bottom_row_data(M_matrix_data_bottom_row_data),
    .gameover(M_matrix_data_gameover),
    .chickenbuild(M_matrix_data_chickenbuild),
    .out(M_matrix_data_out),
    .debug(M_matrix_data_debug)
  );
  wire [6-1:0] M_matrix_writer_col_index;
  wire [4-1:0] M_matrix_writer_row_index;
  wire [1-1:0] M_matrix_writer_red0;
  wire [1-1:0] M_matrix_writer_green0;
  wire [1-1:0] M_matrix_writer_blue0;
  wire [1-1:0] M_matrix_writer_red1;
  wire [1-1:0] M_matrix_writer_green1;
  wire [1-1:0] M_matrix_writer_blue1;
  wire [1-1:0] M_matrix_writer_latch;
  wire [1-1:0] M_matrix_writer_blank;
  wire [1-1:0] M_matrix_writer_sclk_out;
  wire [16-1:0] M_matrix_writer_debug;
  wire [4-1:0] M_matrix_writer_address;
  reg [6-1:0] M_matrix_writer_data;
  matrix_writer_5 matrix_writer (
    .clk(clk),
    .rst(rst),
    .data(M_matrix_writer_data),
    .col_index(M_matrix_writer_col_index),
    .row_index(M_matrix_writer_row_index),
    .red0(M_matrix_writer_red0),
    .green0(M_matrix_writer_green0),
    .blue0(M_matrix_writer_blue0),
    .red1(M_matrix_writer_red1),
    .green1(M_matrix_writer_green1),
    .blue1(M_matrix_writer_blue1),
    .latch(M_matrix_writer_latch),
    .blank(M_matrix_writer_blank),
    .sclk_out(M_matrix_writer_sclk_out),
    .debug(M_matrix_writer_debug),
    .address(M_matrix_writer_address)
  );
  wire [64-1:0] M_game_fsm_led_matrix;
  wire [8-1:0] M_game_fsm_debug;
  wire [8-1:0] M_game_fsm_debug1;
  wire [8-1:0] M_game_fsm_debug2;
  wire [1-1:0] M_game_fsm_chickenWin;
  wire [1-1:0] M_game_fsm_gen_sky_enable;
  wire [1-1:0] M_game_fsm_shift_sky_enable;
  wire [5-1:0] M_game_fsm_generate_sky;
  wire [1-1:0] M_game_fsm_shiftchickenright_en;
  wire [1-1:0] M_game_fsm_shiftchickenleft_en;
  wire [1-1:0] M_game_fsm_init_chicken_en;
  wire [1-1:0] M_game_fsm_start_en;
  wire [1-1:0] M_game_fsm_skywin;
  reg [1-1:0] M_game_fsm_left_button;
  reg [1-1:0] M_game_fsm_right_button;
  reg [1-1:0] M_game_fsm_start_button;
  reg [1-1:0] M_game_fsm_gameover;
  reg [1-1:0] M_game_fsm_chickenbuld;
  gamefsm_6 game_fsm (
    .clk(clk),
    .rst(rst),
    .left_button(M_game_fsm_left_button),
    .right_button(M_game_fsm_right_button),
    .start_button(M_game_fsm_start_button),
    .gameover(M_game_fsm_gameover),
    .chickenbuld(M_game_fsm_chickenbuld),
    .led_matrix(M_game_fsm_led_matrix),
    .debug(M_game_fsm_debug),
    .debug1(M_game_fsm_debug1),
    .debug2(M_game_fsm_debug2),
    .chickenWin(M_game_fsm_chickenWin),
    .gen_sky_enable(M_game_fsm_gen_sky_enable),
    .shift_sky_enable(M_game_fsm_shift_sky_enable),
    .generate_sky(M_game_fsm_generate_sky),
    .shiftchickenright_en(M_game_fsm_shiftchickenright_en),
    .shiftchickenleft_en(M_game_fsm_shiftchickenleft_en),
    .init_chicken_en(M_game_fsm_init_chicken_en),
    .start_en(M_game_fsm_start_en),
    .skywin(M_game_fsm_skywin)
  );
  wire [3-1:0] M_ram_writer_write_data_top;
  wire [3-1:0] M_ram_writer_write_data_bottom;
  wire [1-1:0] M_ram_writer_write_en_top;
  wire [1-1:0] M_ram_writer_write_en_bottom;
  wire [1-1:0] M_ram_writer_write_address_top;
  wire [1-1:0] M_ram_writer_write_address_bottom;
  reg [3-1:0] M_ram_writer_data_read_top;
  reg [3-1:0] M_ram_writer_data_read_bottom;
  ram_writer_7 ram_writer (
    .clk(clk),
    .rst(rst),
    .data_read_top(M_ram_writer_data_read_top),
    .data_read_bottom(M_ram_writer_data_read_bottom),
    .write_data_top(M_ram_writer_write_data_top),
    .write_data_bottom(M_ram_writer_write_data_bottom),
    .write_en_top(M_ram_writer_write_en_top),
    .write_en_bottom(M_ram_writer_write_en_bottom),
    .write_address_top(M_ram_writer_write_address_top),
    .write_address_bottom(M_ram_writer_write_address_bottom)
  );
  wire [5-1:0] M_genSky_sky;
  genSky_8 genSky (
    .clk(clk),
    .rst(rst),
    .sky(M_genSky_sky)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led_r = 2'h0;
    led_g = 2'h0;
    led_b = 2'h0;
    led_addr = 4'h0;
    led_clk = 1'h0;
    led_lat = 1'h0;
    led_blk = 1'h0;
    M_leftbutton_cond_in = leftbutton;
    M_leftbutton_edge_in = M_leftbutton_cond_out;
    M_rightbutton_cond_in = rightbutton;
    M_rightbutton_edge_in = M_rightbutton_cond_out;
    M_startbutton_cond_in = startbutton;
    M_startbutton_edge_in = M_startbutton_cond_out;
    M_matrix_data_top_row_data_in = M_ram_writer_write_data_top;
    M_matrix_data_top_row_en = M_ram_writer_write_en_top;
    M_matrix_data_top_row_address = M_ram_writer_write_address_top;
    M_matrix_data_bottom_row_data_in = M_ram_writer_write_data_bottom;
    M_matrix_data_bottom_row_en = M_ram_writer_write_en_bottom;
    M_matrix_data_bottom_row_address = M_ram_writer_write_address_bottom;
    M_matrix_data_startbutton = M_startbutton_edge_out;
    M_ram_writer_data_read_top = M_matrix_data_top_row_data;
    M_ram_writer_data_read_bottom = M_matrix_data_bottom_row_data;
    M_game_fsm_right_button = M_rightbutton_edge_out;
    M_game_fsm_left_button = M_leftbutton_edge_out;
    M_game_fsm_start_button = M_startbutton_edge_out;
    M_game_fsm_gameover = M_matrix_data_gameover;
    M_matrix_data_genSky = M_game_fsm_gen_sky_enable;
    M_matrix_data_generateSky = M_genSky_sky;
    M_matrix_data_shiftSky = M_startbutton_edge_out;
    M_matrix_data_shiftchickenleft = M_game_fsm_shiftchickenleft_en;
    M_matrix_data_shiftchickenright = M_game_fsm_shiftchickenright_en;
    M_matrix_data_init_chicken_en = M_game_fsm_init_chicken_en;
    M_matrix_data_sky_col_check = 1'h0;
    M_game_fsm_chickenbuld = M_matrix_data_chickenbuild;
    M_matrix_data_skywin = M_game_fsm_skywin;
    M_matrix_data_chicken_location = 1'h0;
    M_matrix_data_row_address = M_matrix_writer_row_index;
    M_matrix_data_column_address = M_matrix_writer_col_index;
    M_matrix_writer_data = M_matrix_data_out;
    M_matrix_data_chickenwin = M_game_fsm_chickenWin;
    M_matrix_data_start_en = M_game_fsm_start_en;
    led_r = {M_matrix_writer_red0, M_matrix_writer_red1};
    led_g = {M_matrix_writer_green0, M_matrix_writer_green1};
    led_b = {M_matrix_writer_blue0, M_matrix_writer_blue1};
    led_addr = M_matrix_writer_address;
    led_clk = M_matrix_writer_sclk_out;
    led_lat = M_matrix_writer_latch;
    led_blk = M_matrix_writer_blank;
  end
endmodule
