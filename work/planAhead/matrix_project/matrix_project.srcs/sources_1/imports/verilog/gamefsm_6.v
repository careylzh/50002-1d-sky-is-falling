/*
   This file was generated automatically by Alchitry Labs version 1.1.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module gamefsm_6 (
    input clk,
    input rst,
    input left_button,
    input right_button,
    input start_button,
    input gameover,
    input chickenbuld,
    output reg [63:0] led_matrix,
    output reg [7:0] debug,
    output reg [7:0] debug1,
    output reg [7:0] debug2,
    output reg chickenWin,
    output reg gen_sky_enable,
    output reg shift_sky_enable,
    output reg [4:0] generate_sky,
    output reg shiftchickenright_en,
    output reg shiftchickenleft_en,
    output reg init_chicken_en,
    output reg start_en,
    output reg skywin
  );
  
  
  
  wire [1-1:0] M_skyFalling_edge_out;
  reg [1-1:0] M_skyFalling_edge_in;
  edge_detector_11 skyFalling_edge (
    .clk(clk),
    .in(M_skyFalling_edge_in),
    .out(M_skyFalling_edge_out)
  );
  localparam START_state = 4'd0;
  localparam INITGRASS_state = 4'd1;
  localparam INITCHICKEN_state = 4'd2;
  localparam IDLE_state = 4'd3;
  localparam GENRAN_state = 4'd4;
  localparam MOVERIGHT_state = 4'd5;
  localparam MOVELEFT_state = 4'd6;
  localparam CHICKENWIN_state = 4'd7;
  localparam SKYWIN_state = 4'd8;
  
  reg [3:0] M_state_d, M_state_q = START_state;
  reg [7:0] M_debug_reg_d, M_debug_reg_q = 1'h0;
  reg [7:0] M_debug_reg1_d, M_debug_reg1_q = 1'h0;
  reg [7:0] M_debug_reg2_d, M_debug_reg2_q = 1'h0;
  reg [32:0] M_timeCount_d, M_timeCount_q = 1'h0;
  wire [1-1:0] M_skyFalling_value;
  counter_12 skyFalling (
    .clk(clk),
    .rst(rst),
    .value(M_skyFalling_value)
  );
  wire [32-1:0] M_skygenerator_num;
  reg [32-1:0] M_skygenerator_seed;
  pn_gen_13 skygenerator (
    .clk(clk),
    .rst(rst),
    .next(1'h1),
    .seed(M_skygenerator_seed),
    .num(M_skygenerator_num)
  );
  reg [31:0] M_seed_d, M_seed_q = 1'h0;
  reg [4:0] M_current_sky_d, M_current_sky_q = 1'h0;
  
  reg skyFall_check;
  
  always @* begin
    M_state_d = M_state_q;
    M_timeCount_d = M_timeCount_q;
    M_seed_d = M_seed_q;
    
    start_en = 1'h1;
    chickenWin = 1'h0;
    M_seed_d = M_seed_q + 1'h1;
    M_skygenerator_seed = M_seed_q;
    shift_sky_enable = 1'h0;
    M_skyFalling_edge_in = M_skyFalling_value;
    skyFall_check = M_skyFalling_edge_out;
    debug = M_debug_reg_q;
    debug1 = M_debug_reg1_q;
    debug2 = M_debug_reg2_q;
    generate_sky = M_current_sky_q;
    gen_sky_enable = 1'h0;
    shiftchickenleft_en = 1'h0;
    shiftchickenright_en = 1'h0;
    init_chicken_en = 1'h0;
    skywin = 1'h0;
    led_matrix = 64'h0000000000000000;
    
    case (M_state_q)
      START_state: begin
        start_en = 1'h1;
        gen_sky_enable = 1'h0;
        if (start_button) begin
          M_state_d = INITGRASS_state;
        end
      end
      INITGRASS_state: begin
        start_en = 1'h0;
        gen_sky_enable = 1'h0;
        M_state_d = INITCHICKEN_state;
      end
      INITCHICKEN_state: begin
        gen_sky_enable = 1'h0;
        init_chicken_en = 1'h1;
        if (chickenbuld) begin
          M_state_d = IDLE_state;
        end
      end
      IDLE_state: begin
        M_timeCount_d = M_timeCount_q + 1'h1;
        gen_sky_enable = 1'h0;
        init_chicken_en = 1'h0;
        shiftchickenleft_en = 1'h0;
        shiftchickenright_en = 1'h0;
        shift_sky_enable = 1'h0;
        if (gameover) begin
          M_state_d = SKYWIN_state;
        end else begin
          if (skyFall_check) begin
            M_state_d = GENRAN_state;
          end else begin
            if (left_button) begin
              M_state_d = MOVELEFT_state;
            end else begin
              if (right_button) begin
                M_state_d = MOVERIGHT_state;
              end else begin
                if (M_timeCount_q[31+0-:1]) begin
                  M_state_d = CHICKENWIN_state;
                end
              end
            end
          end
        end
      end
      MOVELEFT_state: begin
        gen_sky_enable = 1'h0;
        shiftchickenleft_en = 1'h1;
        M_state_d = IDLE_state;
      end
      MOVERIGHT_state: begin
        gen_sky_enable = 1'h0;
        shiftchickenright_en = 1'h1;
        M_state_d = IDLE_state;
      end
      GENRAN_state: begin
        gen_sky_enable = 1'h1;
        generate_sky = M_skygenerator_num[0+4-:5];
        M_state_d = IDLE_state;
      end
      CHICKENWIN_state: begin
        chickenWin = 1'h1;
        gen_sky_enable = 1'h0;
        if (start_button) begin
          chickenWin = 1'h0;
          start_en = 1'h0;
          M_state_d = START_state;
        end
      end
      SKYWIN_state: begin
        skywin = 1'h1;
        gen_sky_enable = 1'h0;
        if (start_button) begin
          skywin = 1'h0;
          start_en = 1'h0;
          M_state_d = START_state;
        end
      end
      default: begin
        gen_sky_enable = 1'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_debug_reg_q <= 1'h0;
      M_debug_reg1_q <= 1'h0;
      M_debug_reg2_q <= 1'h0;
      M_timeCount_q <= 1'h0;
      M_seed_q <= 1'h0;
      M_current_sky_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_debug_reg_q <= M_debug_reg_d;
      M_debug_reg1_q <= M_debug_reg1_d;
      M_debug_reg2_q <= M_debug_reg2_d;
      M_timeCount_q <= M_timeCount_d;
      M_seed_q <= M_seed_d;
      M_current_sky_q <= M_current_sky_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
